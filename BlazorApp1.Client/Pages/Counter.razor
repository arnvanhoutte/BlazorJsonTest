@page "/counter"
@using System.Diagnostics
@using System.Text.Json.Serialization
@using System.Text.Json
@using System.Text.Json.Serialization.Metadata
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject HttpClient Client
@inject ILogger<Counter> Logger

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    private bool shouldRender;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        await GetData2();
        shouldRender = true;
    }
    private async Task GetData1()
    {
        var sw = new Stopwatch();
        Logger.LogInformation($"LOADING FILE");
        sw.Start();
        var response = await Client.GetFromJsonAsync<List<JsonFile>>("bigdata.json");
        sw.Stop();
        Logger.LogInformation($"PARSED FILE {sw.Elapsed}");
    }

    private async Task GetData2()
    {
        var sw = new Stopwatch();
        sw.Start();
        Logger.LogInformation($"LOADING FILE");
        using var responseStream = await Client.GetStreamAsync("bigdata.json");
        sw.Stop();
        Logger.LogInformation($"FILE LOADED: {sw.Elapsed}");
        sw.Start();
        /*
         * var results1 = await System.Text.Json.JsonSerializer.DeserializeAsyncEnumerable<List<JsonFile>>(responseStream, SourceGenerationContext.Default.ListJsonFile)!.ToListAsync();
         * sw.Stop();
         * Logger.LogInformation($"Deserialize1: {sw.Elapsed}");
         * Logger.LogInformation($"rows: {results1.Count}");
         * sw.Start();
         * responseStream.Position = 0;
         */
        var results2 = System.Text.Json.JsonSerializer.Deserialize<List<JsonFile>>(responseStream, SourceGenerationContext.Default.ListJsonFile)!;
        sw.Stop();
        Logger.LogInformation($"Deserialize2: {sw.Elapsed}");
        Logger.LogInformation($"rows: {results2.Count}");

    }
}
